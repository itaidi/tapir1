version: '3'
services:

  #PHP Service - main app
  app:
    build:
      context: .
      dockerfile: php/Dockerfile
    container_name: cars_app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www/src
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network


  #Nginx Service - web server
  nginx:
    image: nginx:alpine
    container_name: cars_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "7777:80"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  # composer & load libs
  composer:
    image: composer:2.1
    container_name: cars_composer
    volumes:
      - ./src/:/var/www
    working_dir: /var/www
    depends_on:
      - app
      - nginx
    command: /bin/sh -c "curl -X 'GET' nginx/start_commands_presets.php && composer install --ignore-platform-reqs"    
    networks:
      - app-network   

  #MySQL Service - for laravel
#  mysql:
#    image: mysql:5.7.22
#    container_name: cars_mysql
#    restart: unless-stopped
#    tty: true
#   ports:
#      - "3306:3306"
#    environment:
#      MYSQL_DATABASE: laravel
#      MYSQL_ROOT_PASSWORD: your_mysql_root_password
#      SERVICE_TAGS: dev
#      SERVICE_NAME: mysql
#    volumes:
#      - dbdata:/var/lib/mysql/
#      - ./mysql/my.cnf:/etc/mysql/my.cnf
#    networks:
#      - app-network

  #MongoDb - for store cars 
  mongodb:
    container_name: cars_mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: laravel
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: your_mongodb_root_password
    depends_on:
      - app
    ports:
      - "27017:27017"
    networks:
      - app-network   
      


    
#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin
#    container_name: cars_phpmyadmin
#    environment:
#      PMA_HOST: mysql
#      PMA_PORT: 3306
#    ports:
#      - 7760:80
#    networks:
#      - app-network
      
  cron:
    build:
      context: .
      dockerfile: cron/cron_only.Dockerfile
    container_name: cars_cron
    restart: always
    user: root
#   Первый запуск загрузки cars.json, дальше циклично через 10 мин, через cron curl
    command: /bin/sh -c "curl -X 'GET' nginx/check_update_cars.php && cron && tail -f /var/log/cron.log"
    volumes:
      - ./src/:/var/www
#      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - composer
      - mongodb
      - app
      - nginx
#      - mysql
    working_dir: /var/www
    networks:
      - app-network   

#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  dbdata:
    driver: local
